from datetime import datetime
from ehr_models import EHRRecord
from ehr_quality_auditor import EHRQualityAuditor
from outlier_detector import OutlierDetector
from validators import EHRValidator
from quality_scorer import QualityScorer

def create_sample_records():
    """Create sample EHR records for testing"""
    return [
        EHRRecord(
            patient_id="P123456",
            timestamp=datetime.now(),
            vital_signs={
                "blood_pressure_systolic": 120,
                "blood_pressure_diastolic": 80,
                "heart_rate": 75,
                "temperature": 37.0,
                "respiratory_rate": 16
            },
            medications=["aspirin", "lisinopril"],
            diagnosis_codes=["I10", "E11.9"],
            lab_results={"glucose": 95, "cholesterol": 180},
            demographics={"age": 45, "gender": "M", "race": "Caucasian"}
        ),
        # Add an outlier record
        EHRRecord(
            patient_id="P789012",
            timestamp=datetime.now(),
            vital_signs={
                "blood_pressure_systolic": 190,  # Abnormally high
                "blood_pressure_diastolic": 110,  # Abnormally high
                "heart_rate": 120,  # Elevated
                "temperature": 39.5,  # Fever
                "respiratory_rate": 25  # Elevated
            },
            medications=["aspirin", "lisinopril", "metformin", "atorvastatin", "metoprolol"],
            diagnosis_codes=["I10", "E11.9", "J45.909", "E78.5"],
            lab_results={"glucose": 180, "cholesterol": 250},
            demographics={"age": 62, "gender": "F", "race": "African American"}
        )
    ]

def run_comprehensive_audit():
    """Run a comprehensive EHR quality audit using all components"""
    print("EHR Quality Audit System")
    print("=======================")
    print(f"Current Date/Time (UTC): 2025-07-03 08:26:52")
    print(f"User: Shravinya\n")

    # Create sample records
    print("Creating sample records...")
    records = create_sample_records()
    print(f"Created {len(records)} test records\n")

    # Initialize components
    validator = EHRValidator()
    outlier_detector = OutlierDetector()
    quality_scorer = QualityScorer()
    auditor = EHRQualityAuditor()

    # Step 1: Validate records
    print("Running validation checks...")
    validation_results = []
    for record in records:
        results = validator.validate_record(record)
        validation_results.extend(results)
    
    print(f"Found {len([r for r in validation_results if not r.is_valid])} validation issues\n")

    # Step 2: Detect outliers
    print("Detecting outliers...")
    outlier_detector.train(records)
    outlier_results = outlier_detector.detect_outliers(records)
    print(f"Found {len(outlier_results)} potential outliers\n")

    # Step 3: Generate quality report
    print("Generating quality report...")
    quality_report = quality_scorer.calculate_scores(
        records=records,
        validation_results=validation_results + outlier_results
    )

    # Step 4: Process complete audit
    final_report = auditor.process_records(records)

    # Save results to file
    report_file = "ehr_quality_report.txt"
    with open(report_file, 'w') as f:
        f.write("EHR Quality Audit Report\n")
        f.write("=======================\n")
        f.write(f"Generated at: 2025-07-03 08:26:52\n")
        f.write(f"Generated by: Shravinya\n\n")
        
        f.write("Validation Results:\n")
        f.write("-----------------\n")
        for result in validation_results:
            if not result.is_valid:
                f.write(f"- {result.field_name}: {result.error_message} (Severity: {result.severity})\n")
        
        f.write("\nOutlier Detection:\n")
        f.write("----------------\n")
        for result in outlier_results:
            f.write(f"- {result.error_message}\n")
        
        f.write("\nQuality Scores:\n")
        f.write("--------------\n")
        f.write(f"Completeness: {quality_report.completeness_score:.2f}%\n")
        f.write(f"Consistency: {quality_report.consistency_score:.2f}%\n")
        f.write(f"Accuracy: {quality_report.accuracy_score:.2f}%\n")
        
        f.write("\nFinal Audit Summary:\n")
        f.write("-----------------\n")
        f.write(auditor.generate_report_summary(final_report))

    print(f"\nDetailed report saved to: {report_file}")
    
    # Print summary to console
    print("\nAudit Summary:")
    print(f"- Records processed: {len(records)}")
    print(f"- Validation issues: {len([r for r in validation_results if not r.is_valid])}")
    print(f"- Outliers detected: {len(outlier_results)}")
    print(f"- Overall quality score: {quality_report.accuracy_score:.2f}%")

if __name__ == '__main__':
    run_comprehensive_audit()